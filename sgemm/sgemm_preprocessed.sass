# Kernel: sgemm_kernel_128
#
# SharedSize: 16384
# Params(8):
#   0:0x140:4:4 param_C,
#   1:0x144:4:0 param_m,
#   2:0x148:4:0 param_n,
#   3:0x14c:4:0 param_k,
#   4:0x150:4:0 param_lda,
#   5:0x154:4:0 param_ldb,
#   6:0x158:4:0 param_ldc
#   7:0x15c:4:4 param_D // for diagnostic printf output
#
# Globals:
#   c[0x0][0x160]: texA (the value is 1)
#   c[0x0][0x164]: texB (the value is 0)

<REGISTER_MAPPING>

    // 64 maxtrix C output registers.
    // Use special mapping to avoid register bank conflicts between these registers and the blocking registers.
     3, 2,11,10,19,18,27,26 : cx00y<00-03|64-67>
     7, 6,15,14,23,22,31,30 : cx01y<00-03|64-67>
     1, 0, 9, 8,17,16,25,24 : cx02y<00-03|64-67>
     5, 4,13,12,21,20,29,28 : cx03y<00-03|64-67>
    35,34,43,42,51,50,59,58 : cx64y<00-03|64-67>
    39,38,47,46,55,54,63,62 : cx65y<00-03|64-67>
    33,32,41,40,49,48,57,56 : cx66y<00-03|64-67>
    37,36,45,44,53,52,61,60 : cx67y<00-03|64-67>

    // Double buffered register blocking
    // Any bank conflicts that we can't avoid in these registers we can hide with .reuse flags
    64-79   : j0Ax<00-03|64-67>, j0By<00-03|64-67>
    80-95   : j1Ax<00-03|64-67>, j1By<00-03|64-67>

    // The offset we store our zero value for initializing C
    // Reuse a register from the second blocking registers
    80      : zOffset
    // Aliases for the C registers we use for initializing C
    0-63    : cz<00-63>

    // Registers to load A or B
    96-103  : loadX<0-7>

    // Key state registers for main loop and some we reuse for outputing C
    104-127 : track<0-7>, ldx8, end, tex, writeS, readAs, readBs, tid, tid31, tid96, tid128, bx, by

    // Temporary registers to calculate the state registers. Reuse the C output registers.
    0-63    : blk, ldx, ldx2, ldx4, k, tid1, tid4, tid7, xmad<0-1>

    // Registers to store the results back to global memory. Reuse any register not needed after the main loop.
    64-79   : cs<0-7>, cy<00|04|08|12>, Cy<00|04|08|12>
    80-115  : m, n, ldc, ldc1, ldc4, ldc8, ldc60, writeCs, readCs, cx, ci, xmad2, D

</REGISTER_MAPPING>

// Scheduler doesn't handle the dependency flags yet,
// so move these first instructions outside the block that's auto scheduled
--:-:1:-:1      S2R tid, SR_TID.X;   // Set Dep 1
--:-:2:-:1      S2R bx,  SR_CTAID.X; // Set Dep 2
--:-:3:-:1      S2R by,  SR_CTAID.Y; // Set Dep 3

// Instructions in a SCHEDULE_BLOCK are automatically reordered and appropriately stalled for simple dependancies
// Memory dependencies are left up to the auther to deal with manually for now.
// First 128 threads load A to shared, 2nd 128 loads B to shared
// Note this technique is not possible in cuda or ptx as there's no way to
// efficiently specify a warp-uniform predicate for a memory op.
// Compile sgemm.cu and inspect the sass to see what I'm talking about.
// blk = tid >= 128 ? by   : bx;
// ldx = tid >= 128 ? ldb  : lda;
// tex = tid >= 128 ? texB : texA;
// Initialize the portion of shared we use to zero our C registers
// Give each warp its own address to write to.
// All threads write to the same address, but we don't care because only one needs to take.
// tid4   = (tid >> 5) & 3
// tid31  = tid & 31
// tid96  = tid & 96
// tid128 = tid & 128
// ldx4  = ldx * 4;
// ldx8  = ldx * 8;
// track0 = blk*128 + tid31 + (ldx * tid4)
// Setup 8 independent track vars so we don't need to synchronize between texture loads
// writeS = (tid31 + tid4*128) * 4
// writeS += 4096 if tid >= 128
// int end = track0 + (k-8)*ldx;
// readAs and readBs are carefully constructed to avoid any bank conflicts while loading from shared
// readAs = ((tid128 >> 4) | ((tid >> 1) & 7)) << 4;
// readBs  = (((tid & 0x70) >> 3) | (tid & 1)) << 4 + 4096;
// Preload the first 8 lines from texture memory
// Break this up into two barriers so we can load 4 at a time along a single cache line.
// Keep these instructions in this order (but allow others to interleave).
// Normally the scheduler tries to preserve source order by default, but this demonstrates how you enforce
// an ordering if you need to.
01:-:-:Y:1      ISETP.GE.AND P0, PT, tid, 128, PT; // Wait Dep 1
--:-:-:-:1      BFE.U32 tid4, tid, 0x205; // 2 bits at position 5
--:-:-:-:1      LOP.AND tid31, tid, 31;
--:-:-:-:1      BFE.U32 tid7, tid, 0x301; // 3 bits at position 1
--:-:-:-:1      MOV k, c[0x0][0x14c];
--:-:-:-:1      LOP.AND tid128, tid, 128;
--:-:-:-:1      LOP.AND readBs, tid, 0x70;
--:-:-:-:1      LOP.AND tid1, tid, 1;
--:-:-:-:1      ISCADD writeS, tid4, tid31, 7;
--:-:-:-:1      LOP.AND zOffset, tid, -32;
--:-:-:-:1      IADD k, k, -8;
--:-:-:-:1      SHR.U32 readAs, tid128, 4;
--:-:-:-:1      LOP.AND tid96, tid, 96;
--:-:-:-:1      SHR.U32 readBs, readBs, 3;
--:-:-:-:0 @!P0 MOV ldx, c[0x0][0x150];
--:-:-:-:1      STS.128 [zOffset + 4x<2048>], RZ;
--:-:-:-:1  @P0 MOV ldx, c[0x0][0x154];
--:-:-:-:1      SHL writeS, writeS, 2;
06:-:-:-:1      SEL blk, by, bx, P0;               // Wait Dep 2 & 3
--:-:-:-:1 @!P0 MOV32I tex, 0x80000001; // texA
--:-:-:-:1  @P0 MOV32I tex, 0x80000000; // texB
--:-:-:-:1      LOP.OR readAs, readAs, tid7;
--:-:-:-:1      SHL ldx4, ldx, 2;
--:-:-:-:1      XMAD.MRG xmad0, ldx, tid4.H1, RZ; // XMAD.LO is a macro that is expanded out into the 3 XMADs
--:-:-:-:1      ISCADD track0, blk, tid31, 7;
--:-:-:-:1      XMAD.MRG xmad1, k, ldx.H1, RZ;
--:-:-:-:1      LOP.OR readBs, readBs, tid1;
--:-:-:-:1      SHL readAs, readAs, 4;
--:-:-:-:1      IADD ldx8, ldx4, ldx4;
--:-:-:-:1  @P0 IADD writeS, writeS, 4x<1024>;
--:-:-:-:2      XMAD track0, ldx, tid4, track0;
--:-:-:-:4      ISCADD readBs, readBs, 4x<1024>, 4;
--:-:-:-:2      XMAD.PSL.CBCC track0, ldx.H1, xmad0.H1, track0;
--:-:-:-:4      TLD.B.LZ.T loadX0, track0, tex, 0x0, 1D, 0x1;
--:-:-:-:1      IADD track1, track0, 32;
--:-:-:-:1      IADD track2, track0, 64;
--:-:-:-:1      TLD.B.LZ.T loadX1, track1, tex, 0x0, 1D, 0x1;
--:-:-:-:0      IADD track3, track0, 96;
--:-:-:-:1      TLD.B.LZ.T loadX2, track2, tex, 0x0, 1D, 0x1;
--:-:-:-:1      IADD track4, track0, ldx4;
--:-:1:-:1      TLD.B.LZ.P loadX3, track3, tex, 0x0, 1D, 0x1; // Set Dep 1
--:-:-:-:0      IADD track5, track1, ldx4;
--:-:-:-:1      TLD.B.LZ.T loadX4, track4, tex, 0x0, 1D, 0x1;
--:-:-:-:1      IADD track6, track2, ldx4;
--:-:-:-:1      TLD.B.LZ.T loadX5, track5, tex, 0x0, 1D, 0x1;
--:-:-:-:0      IADD track7, track3, ldx4;
--:-:-:-:1      TLD.B.LZ.T loadX6, track6, tex, 0x0, 1D, 0x1;
--:-:-:-:1      XMAD end, k, ldx, track0;
--:-:2:Y:5      TLD.B.LZ.P loadX7, track7, tex, 0x0, 1D, 0x1; // Set Dep 2
--:-:-:-:1      XMAD.PSL.CBCC end, k.H1, xmad1.H1, end;

// These instuctions need to occur after the textures load so put them in a new block
// that starts with a dependency barrier wait.
// Increment tracks after the loads are complete to avoid needing write-after-read dependencies
// Wait for all threads to finish loading shared
01:-:-:-:1      STS [writeS + 4x<000 + 00>], loadX0; // Wait Dep 1
--:-:-:-:0      IADD track0, track0, ldx8;
--:-:-:-:1      STS [writeS + 4x<000 + 32>], loadX1;
--:-:-:-:0      IADD track1, track1, ldx8;
--:-:-:-:1      STS [writeS + 4x<000 + 64>], loadX2;
--:-:-:-:0      IADD track2, track2, ldx8;
--:-:-:-:1      STS [writeS + 4x<000 + 96>], loadX3;
--:-:-:-:0      IADD track3, track3, ldx8;
02:-:-:-:1      STS [writeS + 4x<512 + 00>], loadX4; // Wait Dep 2
--:-:-:-:0      IADD track4, track4, ldx8;
--:-:-:-:1      STS [writeS + 4x<512 + 32>], loadX5;
--:-:-:-:0      IADD track5, track5, ldx8;
--:-:-:-:1      STS [writeS + 4x<512 + 64>], loadX6;
--:-:-:-:0      IADD track6, track6, ldx8;
--:-:-:-:1      STS [writeS + 4x<512 + 96>], loadX7;
--:-:-:-:0      IADD track7, track7, ldx8;
--:-:-:-:5      BAR.SYNC 0x0;

// Initialize C registeres to zero
// Using LDS.U.128 is a neat trick to save a few clock cyles
// (when you have enough warps to hide the latency.)
--:-:-:-:1      LDS.U.128 cz00, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz04, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz08, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz12, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz16, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz20, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz24, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz28, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz32, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz36, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz40, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz44, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz48, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz52, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz56, [zOffset + 4x<2048>];
--:-:-:-:1      LDS.U.128 cz60, [zOffset + 4x<2048>];

// The next store to shared goes to high area.
// Having 2 share buffers allows us to eliminate a bar.sync in the main loop
--:-:-:-:0      LOP.XOR writeS, writeS, 4x<2048>;

// Preload the fist lines of A and B from shared
--:-:-:-:1      LDS.U.128 j0Ax00, [readAs + 4x<0*128 + 00>];
--:-:-:-:1      LDS.U.128 j0By00, [readBs + 4x<0*128 + 00>];
--:-:-:-:1      LDS.U.128 j0Ax64, [readAs + 4x<0*128 + 64>];
--:-:1:-:1      LDS.U.128 j0By64, [readBs + 4x<0*128 + 64>]; // Set Dep 1


// The main loop
// While calculating the first line, load in the next line from shared.
// Shared memory stores enough to do this 8 times per loop.
// Also pull in the next block of memory from global and store it to shared.

// Efficiency:
// ffma: 512
// lds:  32 dual issued
// sts:  8  dual issued
// tex:  8  dual issued
// add:  8
// xor:  3
// setp: 1
// bar:  1  dual issued
// bra:  1  dual issued
// Total: 524 (512/524 = 97.7% FFMA)

LOOP:

// Loop end condition
--:-:-:-:1      ISETP.LE.AND P0, PT, track0, end, PT;
01:-:-:-:0      FFMA cx02y00, j0Ax02, j0By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j1Ax00, [readAs + 4x<1*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j0Ax00, j0By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j0Ax00, j0By01, cx00y01;
--:-:-:-:1      LDS.U.128 j1By00, [readBs + 4x<1*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j0Ax02, j0By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j0Ax01, j0By00, cx01y00;
--:-:-:-:1      LDS.U.128 j1Ax64, [readAs + 4x<1*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j0Ax03, j0By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j0Ax01, j0By01, cx01y01;
--:-:1:-:1      LDS.U.128 j1By64, [readBs + 4x<1*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j0Ax03, j0By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j0Ax64, j0By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j0Ax66, j0By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j0Ax64, j0By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j0Ax66, j0By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j0Ax65, j0By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j0Ax67, j0By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j0Ax65, j0By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j0Ax67, j0By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j0Ax65, j0By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j0Ax67, j0By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j0Ax65, j0By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j0Ax67, j0By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j0Ax64, j0By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j0Ax66, j0By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j0Ax64, j0By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j0Ax66, j0By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j0Ax01, j0By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j0Ax03, j0By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j0Ax01, j0By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j0Ax03, j0By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j0Ax00, j0By02, cx00y02;
--:-:-:-:0      FFMA cx02y02, j0Ax02, j0By02, cx02y02;
--:-:-:-:1  @P0 TLD.B.LZ.T loadX0, track0, tex, 0x0, 1D, 0x1;
--:-:-:-:1      FFMA cx00y03, j0Ax00, j0By03, cx00y03;
--:-:-:-:0      FFMA cx02y03, j0Ax02, j0By03, cx02y03;
--:-:-:-:1  @P0 TLD.B.LZ.T loadX1, track1, tex, 0x0, 1D, 0x1;
--:-:-:-:1      FFMA cx00y64, j0Ax00, j0By64, cx00y64;
--:-:-:-:0      FFMA cx02y64, j0Ax02, j0By64, cx02y64;
--:-:-:-:1  @P0 TLD.B.LZ.T loadX2, track2, tex, 0x0, 1D, 0x1;
--:-:-:-:1      FFMA cx00y65, j0Ax00, j0By65, cx00y65;
--:-:-:-:0      FFMA cx02y65, j0Ax02, j0By65, cx02y65;
--:-:2:-:1  @P0 TLD.B.LZ.P loadX3, track3, tex, 0x0, 1D, 0x1; // Set Dep 2
--:-:-:-:1      FFMA cx01y64, j0Ax01, j0By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j0Ax03, j0By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j0Ax01, j0By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j0Ax03, j0By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j0Ax64, j0By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j0Ax66, j0By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j0Ax64, j0By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j0Ax66, j0By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j0Ax65, j0By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j0Ax67, j0By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j0Ax65, j0By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j0Ax67, j0By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j0Ax65, j0By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j0Ax67, j0By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j0Ax65, j0By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j0Ax67, j0By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j0Ax64, j0By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j0Ax66, j0By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j0Ax64, j0By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j0Ax66, j0By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j0Ax01, j0By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j0Ax03, j0By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j0Ax01, j0By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j0Ax03, j0By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j0Ax00, j0By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j0Ax02, j0By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j0Ax00, j0By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j0Ax02, j0By67, cx02y67;
01:-:-:-:0      FFMA cx02y00, j1Ax02, j1By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j0Ax00, [readAs + 4x<2*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j1Ax00, j1By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j1Ax00, j1By01, cx00y01;
--:-:-:-:1      LDS.U.128 j0By00, [readBs + 4x<2*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j1Ax02, j1By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j1Ax01, j1By00, cx01y00;
--:-:-:-:1      LDS.U.128 j0Ax64, [readAs + 4x<2*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j1Ax03, j1By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j1Ax01, j1By01, cx01y01;
--:-:1:-:1      LDS.U.128 j0By64, [readBs + 4x<2*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j1Ax03, j1By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j1Ax64, j1By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j1Ax66, j1By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j1Ax64, j1By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j1Ax66, j1By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j1Ax65, j1By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j1Ax67, j1By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j1Ax65, j1By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j1Ax67, j1By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j1Ax65, j1By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j1Ax67, j1By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j1Ax65, j1By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j1Ax67, j1By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j1Ax64, j1By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j1Ax66, j1By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j1Ax64, j1By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j1Ax66, j1By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j1Ax01, j1By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j1Ax03, j1By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j1Ax01, j1By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j1Ax03, j1By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j1Ax00, j1By02, cx00y02;
--:-:-:-:0      FFMA cx02y02, j1Ax02, j1By02, cx02y02;
--:-:-:-:1  @P0 TLD.B.LZ.T loadX4, track4, tex, 0x0, 1D, 0x1;
--:-:-:-:1      FFMA cx00y03, j1Ax00, j1By03, cx00y03;
--:-:-:-:0      FFMA cx02y03, j1Ax02, j1By03, cx02y03;
--:-:-:-:1  @P0 TLD.B.LZ.T loadX5, track5, tex, 0x0, 1D, 0x1;
--:-:-:-:1      FFMA cx00y64, j1Ax00, j1By64, cx00y64;
--:-:-:-:0      FFMA cx02y64, j1Ax02, j1By64, cx02y64;
--:-:-:-:1  @P0 TLD.B.LZ.T loadX6, track6, tex, 0x0, 1D, 0x1;
--:-:-:-:1      FFMA cx00y65, j1Ax00, j1By65, cx00y65;
--:-:-:-:0      FFMA cx02y65, j1Ax02, j1By65, cx02y65;
--:-:3:-:1  @P0 TLD.B.LZ.P loadX7, track7, tex, 0x0, 1D, 0x1; // Set Dep 3
--:-:-:-:1      FFMA cx01y64, j1Ax01, j1By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j1Ax03, j1By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j1Ax01, j1By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j1Ax03, j1By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j1Ax64, j1By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j1Ax66, j1By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j1Ax64, j1By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j1Ax66, j1By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j1Ax65, j1By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j1Ax67, j1By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j1Ax65, j1By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j1Ax67, j1By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j1Ax65, j1By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j1Ax67, j1By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j1Ax65, j1By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j1Ax67, j1By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j1Ax64, j1By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j1Ax66, j1By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j1Ax64, j1By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j1Ax66, j1By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j1Ax01, j1By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j1Ax03, j1By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j1Ax01, j1By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j1Ax03, j1By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j1Ax00, j1By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j1Ax02, j1By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j1Ax00, j1By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j1Ax02, j1By67, cx02y67;
01:-:-:-:0      FFMA cx02y00, j0Ax02, j0By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j1Ax00, [readAs + 4x<3*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j0Ax00, j0By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j0Ax00, j0By01, cx00y01;
--:-:-:-:1      LDS.U.128 j1By00, [readBs + 4x<3*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j0Ax02, j0By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j0Ax01, j0By00, cx01y00;
--:-:-:-:1      LDS.U.128 j1Ax64, [readAs + 4x<3*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j0Ax03, j0By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j0Ax01, j0By01, cx01y01;
--:-:1:-:1      LDS.U.128 j1By64, [readBs + 4x<3*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j0Ax03, j0By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j0Ax64, j0By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j0Ax66, j0By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j0Ax64, j0By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j0Ax66, j0By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j0Ax65, j0By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j0Ax67, j0By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j0Ax65, j0By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j0Ax67, j0By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j0Ax65, j0By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j0Ax67, j0By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j0Ax65, j0By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j0Ax67, j0By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j0Ax64, j0By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j0Ax66, j0By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j0Ax64, j0By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j0Ax66, j0By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j0Ax01, j0By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j0Ax03, j0By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j0Ax01, j0By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j0Ax03, j0By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j0Ax00, j0By02, cx00y02;
--:-:-:-:1      FFMA cx02y02, j0Ax02, j0By02, cx02y02;
--:-:-:-:1      FFMA cx00y03, j0Ax00, j0By03, cx00y03;
--:-:-:-:1      FFMA cx02y03, j0Ax02, j0By03, cx02y03;
--:-:-:-:1      FFMA cx00y64, j0Ax00, j0By64, cx00y64;
--:-:-:-:1      FFMA cx02y64, j0Ax02, j0By64, cx02y64;
--:-:-:-:1      FFMA cx00y65, j0Ax00, j0By65, cx00y65;
--:-:-:-:1      FFMA cx02y65, j0Ax02, j0By65, cx02y65;
--:-:-:-:1      FFMA cx01y64, j0Ax01, j0By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j0Ax03, j0By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j0Ax01, j0By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j0Ax03, j0By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j0Ax64, j0By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j0Ax66, j0By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j0Ax64, j0By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j0Ax66, j0By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j0Ax65, j0By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j0Ax67, j0By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j0Ax65, j0By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j0Ax67, j0By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j0Ax65, j0By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j0Ax67, j0By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j0Ax65, j0By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j0Ax67, j0By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j0Ax64, j0By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j0Ax66, j0By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j0Ax64, j0By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j0Ax66, j0By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j0Ax01, j0By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j0Ax03, j0By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j0Ax01, j0By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j0Ax03, j0By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j0Ax00, j0By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j0Ax02, j0By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j0Ax00, j0By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j0Ax02, j0By67, cx02y67;
01:-:-:-:0      FFMA cx02y00, j1Ax02, j1By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j0Ax00, [readAs + 4x<4*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j1Ax00, j1By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j1Ax00, j1By01, cx00y01;
--:-:-:-:1      LDS.U.128 j0By00, [readBs + 4x<4*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j1Ax02, j1By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j1Ax01, j1By00, cx01y00;
--:-:-:-:1      LDS.U.128 j0Ax64, [readAs + 4x<4*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j1Ax03, j1By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j1Ax01, j1By01, cx01y01;
--:-:1:-:1      LDS.U.128 j0By64, [readBs + 4x<4*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j1Ax03, j1By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j1Ax64, j1By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j1Ax66, j1By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j1Ax64, j1By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j1Ax66, j1By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j1Ax65, j1By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j1Ax67, j1By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j1Ax65, j1By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j1Ax67, j1By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j1Ax65, j1By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j1Ax67, j1By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j1Ax65, j1By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j1Ax67, j1By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j1Ax64, j1By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j1Ax66, j1By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j1Ax64, j1By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j1Ax66, j1By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j1Ax01, j1By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j1Ax03, j1By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j1Ax01, j1By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j1Ax03, j1By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j1Ax00, j1By02, cx00y02;
--:-:-:-:1      FFMA cx02y02, j1Ax02, j1By02, cx02y02;
--:-:-:-:1      FFMA cx00y03, j1Ax00, j1By03, cx00y03;
--:-:-:-:1      FFMA cx02y03, j1Ax02, j1By03, cx02y03;
--:-:-:-:1      FFMA cx00y64, j1Ax00, j1By64, cx00y64;
--:-:-:-:1      FFMA cx02y64, j1Ax02, j1By64, cx02y64;
--:-:-:-:1      FFMA cx00y65, j1Ax00, j1By65, cx00y65;
--:-:-:-:1      FFMA cx02y65, j1Ax02, j1By65, cx02y65;
--:-:-:-:1      FFMA cx01y64, j1Ax01, j1By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j1Ax03, j1By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j1Ax01, j1By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j1Ax03, j1By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j1Ax64, j1By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j1Ax66, j1By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j1Ax64, j1By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j1Ax66, j1By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j1Ax65, j1By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j1Ax67, j1By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j1Ax65, j1By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j1Ax67, j1By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j1Ax65, j1By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j1Ax67, j1By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j1Ax65, j1By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j1Ax67, j1By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j1Ax64, j1By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j1Ax66, j1By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j1Ax64, j1By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j1Ax66, j1By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j1Ax01, j1By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j1Ax03, j1By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j1Ax01, j1By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j1Ax03, j1By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j1Ax00, j1By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j1Ax02, j1By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j1Ax00, j1By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j1Ax02, j1By67, cx02y67;
01:-:-:-:0      FFMA cx02y00, j0Ax02, j0By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j1Ax00, [readAs + 4x<5*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j0Ax00, j0By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j0Ax00, j0By01, cx00y01;
--:-:-:-:1      LDS.U.128 j1By00, [readBs + 4x<5*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j0Ax02, j0By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j0Ax01, j0By00, cx01y00;
--:-:-:-:1      LDS.U.128 j1Ax64, [readAs + 4x<5*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j0Ax03, j0By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j0Ax01, j0By01, cx01y01;
--:-:1:-:1      LDS.U.128 j1By64, [readBs + 4x<5*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j0Ax03, j0By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j0Ax64, j0By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j0Ax66, j0By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j0Ax64, j0By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j0Ax66, j0By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j0Ax65, j0By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j0Ax67, j0By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j0Ax65, j0By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j0Ax67, j0By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j0Ax65, j0By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j0Ax67, j0By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j0Ax65, j0By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j0Ax67, j0By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j0Ax64, j0By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j0Ax66, j0By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j0Ax64, j0By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j0Ax66, j0By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j0Ax01, j0By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j0Ax03, j0By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j0Ax01, j0By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j0Ax03, j0By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j0Ax00, j0By02, cx00y02;
--:-:-:-:1      FFMA cx02y02, j0Ax02, j0By02, cx02y02;
--:-:-:-:1      FFMA cx00y03, j0Ax00, j0By03, cx00y03;
--:-:-:-:1      FFMA cx02y03, j0Ax02, j0By03, cx02y03;
--:-:-:-:1      FFMA cx00y64, j0Ax00, j0By64, cx00y64;
--:-:-:-:1      FFMA cx02y64, j0Ax02, j0By64, cx02y64;
--:-:-:-:1      FFMA cx00y65, j0Ax00, j0By65, cx00y65;
--:-:-:-:1      FFMA cx02y65, j0Ax02, j0By65, cx02y65;
--:-:-:-:1      FFMA cx01y64, j0Ax01, j0By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j0Ax03, j0By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j0Ax01, j0By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j0Ax03, j0By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j0Ax64, j0By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j0Ax66, j0By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j0Ax64, j0By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j0Ax66, j0By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j0Ax65, j0By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j0Ax67, j0By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j0Ax65, j0By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j0Ax67, j0By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j0Ax65, j0By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j0Ax67, j0By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j0Ax65, j0By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j0Ax67, j0By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j0Ax64, j0By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j0Ax66, j0By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j0Ax64, j0By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j0Ax66, j0By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j0Ax01, j0By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j0Ax03, j0By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j0Ax01, j0By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j0Ax03, j0By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j0Ax00, j0By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j0Ax02, j0By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j0Ax00, j0By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j0Ax02, j0By67, cx02y67;
01:-:-:-:0      FFMA cx02y00, j1Ax02, j1By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j0Ax00, [readAs + 4x<6*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j1Ax00, j1By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j1Ax00, j1By01, cx00y01;
--:-:-:-:1      LDS.U.128 j0By00, [readBs + 4x<6*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j1Ax02, j1By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j1Ax01, j1By00, cx01y00;
--:-:-:-:1      LDS.U.128 j0Ax64, [readAs + 4x<6*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j1Ax03, j1By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j1Ax01, j1By01, cx01y01;
--:-:1:-:1      LDS.U.128 j0By64, [readBs + 4x<6*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j1Ax03, j1By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j1Ax64, j1By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j1Ax66, j1By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j1Ax64, j1By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j1Ax66, j1By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j1Ax65, j1By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j1Ax67, j1By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j1Ax65, j1By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j1Ax67, j1By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j1Ax65, j1By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j1Ax67, j1By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j1Ax65, j1By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j1Ax67, j1By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j1Ax64, j1By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j1Ax66, j1By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j1Ax64, j1By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j1Ax66, j1By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j1Ax01, j1By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j1Ax03, j1By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j1Ax01, j1By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j1Ax03, j1By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j1Ax00, j1By02, cx00y02;
--:-:-:-:0      FFMA cx02y02, j1Ax02, j1By02, cx02y02;
02:-:-:-:1  @P0 STS [writeS + 4x<000 + 00>], loadX0;       // Wait Dep 2
--:-:-:-:1      FFMA cx00y03, j1Ax00, j1By03, cx00y03;
--:-:-:-:0      FFMA cx02y03, j1Ax02, j1By03, cx02y03;
--:-:-:-:1  @P0 STS [writeS + 4x<000 + 32>], loadX1;
--:-:-:-:1      FFMA cx00y64, j1Ax00, j1By64, cx00y64;
--:-:-:-:0      FFMA cx02y64, j1Ax02, j1By64, cx02y64;
--:-:-:-:1  @P0 STS [writeS + 4x<000 + 64>], loadX2;
--:-:-:-:1      FFMA cx00y65, j1Ax00, j1By65, cx00y65;
--:-:-:-:0      FFMA cx02y65, j1Ax02, j1By65, cx02y65;
--:-:-:-:1  @P0 STS [writeS + 4x<000 + 96>], loadX3;
--:-:-:-:1      FFMA cx01y64, j1Ax01, j1By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j1Ax03, j1By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j1Ax01, j1By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j1Ax03, j1By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j1Ax64, j1By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j1Ax66, j1By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j1Ax64, j1By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j1Ax66, j1By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j1Ax65, j1By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j1Ax67, j1By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j1Ax65, j1By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j1Ax67, j1By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j1Ax65, j1By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j1Ax67, j1By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j1Ax65, j1By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j1Ax67, j1By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j1Ax64, j1By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j1Ax66, j1By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j1Ax64, j1By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j1Ax66, j1By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j1Ax01, j1By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j1Ax03, j1By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j1Ax01, j1By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j1Ax03, j1By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j1Ax00, j1By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j1Ax02, j1By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j1Ax00, j1By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j1Ax02, j1By67, cx02y67;
01:-:-:-:0      FFMA cx02y00, j0Ax02, j0By00, cx02y00; // Wait Dep 1
--:-:-:-:1      LDS.U.128 j1Ax00, [readAs + 4x<7*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j0Ax00, j0By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j0Ax00, j0By01, cx00y01;
--:-:-:-:1      LDS.U.128 j1By00, [readBs + 4x<7*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j0Ax02, j0By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j0Ax01, j0By00, cx01y00;
--:-:-:-:1      LDS.U.128 j1Ax64, [readAs + 4x<7*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j0Ax03, j0By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j0Ax01, j0By01, cx01y01;
--:-:1:-:1      LDS.U.128 j1By64, [readBs + 4x<7*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j0Ax03, j0By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j0Ax64, j0By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j0Ax66, j0By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j0Ax64, j0By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j0Ax66, j0By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j0Ax65, j0By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j0Ax67, j0By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j0Ax65, j0By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j0Ax67, j0By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j0Ax65, j0By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j0Ax67, j0By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j0Ax65, j0By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j0Ax67, j0By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j0Ax64, j0By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j0Ax66, j0By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j0Ax64, j0By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j0Ax66, j0By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j0Ax01, j0By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j0Ax03, j0By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j0Ax01, j0By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j0Ax03, j0By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j0Ax00, j0By02, cx00y02;
--:-:-:-:0      FFMA cx02y02, j0Ax02, j0By02, cx02y02;
04:-:-:-:1  @P0 STS [writeS + 4x<512 + 00>], loadX4;       // Wait Dep 3
--:-:-:-:1      FFMA cx00y03, j0Ax00, j0By03, cx00y03;
--:-:-:-:0      FFMA cx02y03, j0Ax02, j0By03, cx02y03;
--:-:-:-:1  @P0 STS [writeS + 4x<512 + 32>], loadX5;
--:-:-:-:1      FFMA cx00y64, j0Ax00, j0By64, cx00y64;
--:-:-:-:0      FFMA cx02y64, j0Ax02, j0By64, cx02y64;
--:-:-:-:1  @P0 STS [writeS + 4x<512 + 64>], loadX6;
--:-:-:-:1      FFMA cx00y65, j0Ax00, j0By65, cx00y65;
--:-:-:-:0      FFMA cx02y65, j0Ax02, j0By65, cx02y65;
--:-:-:-:1  @P0 STS [writeS + 4x<512 + 96>], loadX7;
--:-:-:-:1      FFMA cx01y64, j0Ax01, j0By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j0Ax03, j0By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j0Ax01, j0By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j0Ax03, j0By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j0Ax64, j0By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j0Ax66, j0By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j0Ax64, j0By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j0Ax66, j0By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j0Ax65, j0By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j0Ax67, j0By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j0Ax65, j0By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j0Ax67, j0By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j0Ax65, j0By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j0Ax67, j0By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j0Ax65, j0By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j0Ax67, j0By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j0Ax64, j0By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j0Ax66, j0By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j0Ax64, j0By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j0Ax66, j0By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j0Ax01, j0By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j0Ax03, j0By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j0Ax01, j0By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j0Ax03, j0By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j0Ax00, j0By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j0Ax02, j0By66, cx02y66;
--:-:-:-:0      FFMA cx00y67, j0Ax00, j0By67, cx00y67;
01:-:-:-:5  @P0 BAR.SYNC 0x0; // Wait Dep 1
--:-:-:-:1  @P0 LOP.XOR readAs, readAs, 4x<2048>;
--:-:-:-:1  @P0 LOP.XOR readBs, readBs, 4x<2048>;
--:-:-:-:1  @P0 LOP.XOR writeS, writeS, 4x<2048>;
--:-:-:-:1      FFMA cx02y67, j0Ax02, j0By67, cx02y67;
--:-:-:-:0      FFMA cx02y00, j1Ax02, j1By00, cx02y00;
--:-:-:-:1  @P0 LDS.U.128 j0Ax00, [readAs + 4x<0*128 + 00>];
--:-:-:-:1      FFMA cx00y00, j1Ax00, j1By00, cx00y00;
--:-:-:-:0      FFMA cx00y01, j1Ax00, j1By01, cx00y01;
--:-:-:-:1  @P0 LDS.U.128 j0By00, [readBs + 4x<0*128 + 00>];
--:-:-:-:1      FFMA cx02y01, j1Ax02, j1By01, cx02y01;
--:-:-:-:0      FFMA cx01y00, j1Ax01, j1By00, cx01y00;
--:-:-:-:1  @P0 LDS.U.128 j0Ax64, [readAs + 4x<0*128 + 64>];
--:-:-:-:1      FFMA cx03y00, j1Ax03, j1By00, cx03y00;
--:-:-:-:0      FFMA cx01y01, j1Ax01, j1By01, cx01y01;
--:-:1:-:1  @P0 LDS.U.128 j0By64, [readBs + 4x<0*128 + 64>]; // Set Dep 1
--:-:-:-:1      FFMA cx03y01, j1Ax03, j1By01, cx03y01;
--:-:-:-:1      FFMA cx64y00, j1Ax64, j1By00, cx64y00;
--:-:-:-:1      FFMA cx66y00, j1Ax66, j1By00, cx66y00;
--:-:-:-:1      FFMA cx64y01, j1Ax64, j1By01, cx64y01;
--:-:-:-:1      FFMA cx66y01, j1Ax66, j1By01, cx66y01;
--:-:-:-:1      FFMA cx65y00, j1Ax65, j1By00, cx65y00;
--:-:-:-:1      FFMA cx67y00, j1Ax67, j1By00, cx67y00;
--:-:-:-:1      FFMA cx65y01, j1Ax65, j1By01, cx65y01;
--:-:-:-:1      FFMA cx67y01, j1Ax67, j1By01, cx67y01;
--:-:-:-:1      FFMA cx65y02, j1Ax65, j1By02, cx65y02;
--:-:-:-:1      FFMA cx67y02, j1Ax67, j1By02, cx67y02;
--:-:-:-:1      FFMA cx65y03, j1Ax65, j1By03, cx65y03;
--:-:-:-:1      FFMA cx67y03, j1Ax67, j1By03, cx67y03;
--:-:-:-:1      FFMA cx64y02, j1Ax64, j1By02, cx64y02;
--:-:-:-:1      FFMA cx66y02, j1Ax66, j1By02, cx66y02;
--:-:-:-:1      FFMA cx64y03, j1Ax64, j1By03, cx64y03;
--:-:-:-:1      FFMA cx66y03, j1Ax66, j1By03, cx66y03;
--:-:-:-:1      FFMA cx01y02, j1Ax01, j1By02, cx01y02;
--:-:-:-:1      FFMA cx03y02, j1Ax03, j1By02, cx03y02;
--:-:-:-:1      FFMA cx01y03, j1Ax01, j1By03, cx01y03;
--:-:-:-:1      FFMA cx03y03, j1Ax03, j1By03, cx03y03;
--:-:-:Y:1      FFMA cx00y02, j1Ax00, j1By02, cx00y02;
--:-:-:-:1      FFMA cx02y02, j1Ax02, j1By02, cx02y02;
--:-:-:-:1      FFMA cx00y03, j1Ax00, j1By03, cx00y03;
--:-:-:-:1      FFMA cx02y03, j1Ax02, j1By03, cx02y03;
--:-:-:-:1      FFMA cx00y64, j1Ax00, j1By64, cx00y64;
--:-:-:-:1      FFMA cx02y64, j1Ax02, j1By64, cx02y64;
--:-:-:-:1      FFMA cx00y65, j1Ax00, j1By65, cx00y65;
--:-:-:-:1      FFMA cx02y65, j1Ax02, j1By65, cx02y65;
--:-:-:-:1      FFMA cx01y64, j1Ax01, j1By64, cx01y64;
--:-:-:-:1      FFMA cx03y64, j1Ax03, j1By64, cx03y64;
--:-:-:-:1      FFMA cx01y65, j1Ax01, j1By65, cx01y65;
--:-:-:-:1      FFMA cx03y65, j1Ax03, j1By65, cx03y65;
--:-:-:-:1      FFMA cx64y64, j1Ax64, j1By64, cx64y64;
--:-:-:-:1      FFMA cx66y64, j1Ax66, j1By64, cx66y64;
--:-:-:-:1      FFMA cx64y65, j1Ax64, j1By65, cx64y65;
--:-:-:-:1      FFMA cx66y65, j1Ax66, j1By65, cx66y65;
--:-:-:-:1      FFMA cx65y64, j1Ax65, j1By64, cx65y64;
--:-:-:-:1      FFMA cx67y64, j1Ax67, j1By64, cx67y64;
--:-:-:-:1      FFMA cx65y65, j1Ax65, j1By65, cx65y65;
--:-:-:-:1      FFMA cx67y65, j1Ax67, j1By65, cx67y65;
--:-:-:-:1      FFMA cx65y66, j1Ax65, j1By66, cx65y66;
--:-:-:-:1      FFMA cx67y66, j1Ax67, j1By66, cx67y66;
--:-:-:-:1      FFMA cx65y67, j1Ax65, j1By67, cx65y67;
--:-:-:-:1      FFMA cx67y67, j1Ax67, j1By67, cx67y67;
--:-:-:-:1      FFMA cx64y66, j1Ax64, j1By66, cx64y66;
--:-:-:-:1      FFMA cx66y66, j1Ax66, j1By66, cx66y66;
--:-:-:-:1      FFMA cx64y67, j1Ax64, j1By67, cx64y67;
--:-:-:-:1      FFMA cx66y67, j1Ax66, j1By67, cx66y67;
--:-:-:-:1      FFMA cx01y66, j1Ax01, j1By66, cx01y66;
--:-:-:-:1      FFMA cx03y66, j1Ax03, j1By66, cx03y66;
--:-:-:-:1      FFMA cx01y67, j1Ax01, j1By67, cx01y67;
--:-:-:-:1      FFMA cx03y67, j1Ax03, j1By67, cx03y67;
--:-:-:-:1      FFMA cx00y66, j1Ax00, j1By66, cx00y66;
--:-:-:-:1      FFMA cx02y66, j1Ax02, j1By66, cx02y66;
--:-:-:-:1      FFMA cx00y67, j1Ax00, j1By67, cx00y67;
--:-:-:-:1      FFMA cx02y67, j1Ax02, j1By67, cx02y67;
--:-:-:-:1  @P0 IADD track0, track0, ldx8;
--:-:-:-:1  @P0 IADD track1, track1, ldx8;
--:-:-:-:1  @P0 IADD track2, track2, ldx8;
--:-:-:-:1  @P0 IADD track3, track3, ldx8;
--:-:-:-:1  @P0 IADD track4, track4, ldx8;
--:-:-:-:1  @P0 IADD track5, track5, ldx8;
--:-:-:-:1  @P0 IADD track6, track6, ldx8;
--:-:-:-:0  @P0 IADD track7, track7, ldx8;
--:-:-:Y:5  @P0 BRA LOOP;

// Main loop is done, time to write C to global memory.
// Remap readAs and readBs onto writeCs so we can shuffle the output for coalesced global writes.
// readAs stays constant, readBs colapses down from stride 4 to 1
// Remove the high bits if present from the last loop's xor
//writeCs = (readBs / 4) * 128 + readAs;
// Read out the C values from shared in a simple tid mapped pattern but
// offset by the position of this warp's data in shared.
// cx = tid31 | (tid128 >> 2);
//readCs = ((tid96 << 4) | cx) << 2;
// cx += bx*128;
// cy = by*128 + (tid96 >> 1)
// C += (cy*ldc + cx) * 4;
// When writing in assembly, being able to 'printf' is sometimes easier than stepping through the debugger.
// Here's how it's done.  Drop something like this in your code (math assumes 256 threads and 1 block).
// Then modify the c code to accept this many params per thread to printf (see assemblySgemm function).
//--:-:-:-:1      ISCADD D, tid, c[0x0][0x15c], 0x2;
//--:-:-:-:1      STG.CS [D + 4x<0 * 256>], readAs;
//--:-:-:-:1      STG.CS [D + 4x<1 * 256>], readBs;
//--:-:-:-:1      STG.CS [D + 4x<2 * 256>], writeCs;
//--:-:-:-:1      STG.CS [D + 4x<3 * 256>], readCs;
//--:-:-:-:1      STG.CS [D + 4x<4 * 256>], cx;
//--:-:-:-:1      STG.CS [D + 4x<5 * 256>], cy00;
//--:-:-:-:1      STG.CS [D + 4x<6 * 256>], ci;
//--:-:-:-:1      STG.CS [D + 4x<7 * 256>], cx67y67;
// Setup our matrix bounds checking vars and preds
// Setup our C output addresses and increments.
// We pre-increment the output addresses so they can be dual issued with memory ops
// So start with a -1 instead of 0 value.
// Load the first set of the STORE_C subroutine params in the scheduled block.
--:-:-:-:1      SHR.U32 cx, tid128, 2;
--:-:-:-:1      MOV ldc, c[0x0][0x158];
--:-:-:-:1      SHR.U32 cy00, tid96, 1;
--:-:-:-:1      MOV m, c[0x0][0x144];
--:-:-:-:1      SHL readCs, tid96, 4;
--:-:-:-:1      LOP.AND readAs, readAs, 0xfff;
--:-:-:-:1      LOP.OR cx, tid31, cx;
--:-:-:-:1      SHL ldc1, ldc, 2;
--:-:-:-:1      LOP.AND readBs, readBs, 0xfff;
--:-:-:-:1      ISCADD cy00, by, cy00, 7;
--:-:-:-:1      MOV n, c[0x0][0x148];
--:-:-:-:1      SHL ldc4, ldc, 4;
--:-:-:-:1      LOP.OR readCs, readCs, cx;
--:-:-:-:1      ISCADD cx, bx, cx, 7;
--:-:-:-:1      MOV cs0, cx00y00;
--:-:-:-:1      SHL ldc8, ldc, 5;
--:-:-:-:1      XMAD.MRG xmad2, cy00, ldc.H1, RZ;
--:-:-:-:1      ISCADD writeCs, readBs, readAs, 5;
--:-:-:-:1      MOV cs1, cx01y00;
--:-:-:-:1      SHL readCs, readCs, 2;
--:-:-:-:1      XMAD ci, cy00, ldc, cx;
--:-:-:-:1      ISETP.LT.AND P5, PT, cx, m, PT;
--:-:-:-:1      IADD cx, cx, 64;
--:-:-:-:1      ISCADD ldc60, ldc, -ldc4, 8;
--:-:-:-:1      MOV cs2, cx02y00;
--:-:-:-:1      MOV cs3, cx03y00;
--:-:-:-:1      XMAD.PSL.CBCC ci, cy00.H1, xmad2.H1, ci;
--:-:-:-:1      IADD cy00, cy00, -1;
--:-:-:-:1      ISETP.LT.AND P6, PT, cx, m, PT;
--:-:-:-:1      MOV cs4, cx64y00;
--:-:-:-:1      MOV cs5, cx65y00;
--:-:-:-:1      MOV cs6, cx66y00;
--:-:-:-:1      ISCADD Cy00, ci, c[0x0][0x140], 2;
--:-:-:-:1      IADD cy04, cy00, 4;
--:-:-:-:1      IADD cy08, cy00, 8;
--:-:-:-:1      IADD cy12, cy00, 12;
--:-:-:-:2      MOV cs7, cx67y00;
--:-:-:Y:6      IADD Cy00, Cy00, -ldc1;
--:-:-:-:1      IADD Cy04, Cy00, ldc4;
--:-:-:Y:5      IADD Cy08, Cy00, ldc8;
--:-:-:-:0      IADD Cy12, Cy04, ldc8; // Dual Issue (last instruction after reordering)

// There's nothing yet in place to handle dependecies with subroutines.
// So don't schedule this block.
--:-:-:-:5      CAL STORE_C;

02:-:-:-:1      MOV cs0, cx00y01; // Wait Dep 2
--:-:-:-:1      MOV cs1, cx01y01;
--:-:-:-:1      MOV cs2, cx02y01;
--:-:-:-:1      MOV cs3, cx03y01;
--:-:-:-:1      MOV cs4, cx64y01;
--:-:-:-:1      MOV cs5, cx65y01;
--:-:-:-:1      MOV cs6, cx66y01;
--:-:-:-:0      MOV cs7, cx67y01; // Dual Issue
--:-:-:-:5      CAL STORE_C;

02:-:-:-:1      MOV cs0, cx00y02; // Wait Dep 2
--:-:-:-:1      MOV cs1, cx01y02;
--:-:-:-:1      MOV cs2, cx02y02;
--:-:-:-:1      MOV cs3, cx03y02;
--:-:-:-:1      MOV cs4, cx64y02;
--:-:-:-:1      MOV cs5, cx65y02;
--:-:-:-:1      MOV cs6, cx66y02;
--:-:-:-:0      MOV cs7, cx67y02; // Dual Issue
--:-:-:-:5      CAL STORE_C;

02:-:-:-:1      MOV cs0, cx00y03; // Wait Dep 2
--:-:-:-:1      MOV cs1, cx01y03;
--:-:-:-:1      MOV cs2, cx02y03;
--:-:-:-:1      MOV cs3, cx03y03;
--:-:-:-:1      MOV cs4, cx64y03;
--:-:-:-:1      MOV cs5, cx65y03;
--:-:-:-:1      MOV cs6, cx66y03;
--:-:-:-:0      MOV cs7, cx67y03; // Dual Issue
--:-:-:-:5      CAL STORE_C;

--:-:-:-:1      IADD cy00, cy00, 60;
--:-:-:-:1      IADD cy04, cy04, 60;
--:-:-:-:1      IADD cy08, cy08, 60;
--:-:-:-:1      IADD cy12, cy12, 60;

02:-:-:-:1      IADD Cy00, Cy00, ldc60; // Wait Dep 2
--:-:-:-:1      IADD Cy04, Cy04, ldc60;
--:-:-:-:1      IADD Cy08, Cy08, ldc60;
--:-:-:-:1      IADD Cy12, Cy12, ldc60;

--:-:-:-:1      MOV cs0, cx00y64;
--:-:-:-:1      MOV cs1, cx01y64;
--:-:-:-:1      MOV cs2, cx02y64;
--:-:-:-:1      MOV cs3, cx03y64;
--:-:-:-:1      MOV cs4, cx64y64;
--:-:-:-:1      MOV cs5, cx65y64;
--:-:-:-:1      MOV cs6, cx66y64;
--:-:-:-:0      MOV cs7, cx67y64; // Dual Issue
--:-:-:-:5      CAL STORE_C;

02:-:-:-:1      MOV cs0, cx00y65; // Wait Dep 2
--:-:-:-:1      MOV cs1, cx01y65;
--:-:-:-:1      MOV cs2, cx02y65;
--:-:-:-:1      MOV cs3, cx03y65;
--:-:-:-:1      MOV cs4, cx64y65;
--:-:-:-:1      MOV cs5, cx65y65;
--:-:-:-:1      MOV cs6, cx66y65;
--:-:-:-:0      MOV cs7, cx67y65; // Dual Issue
--:-:-:-:5      CAL STORE_C;

02:-:-:-:1      MOV cs0, cx00y66; // Wait Dep 2
--:-:-:-:1      MOV cs1, cx01y66;
--:-:-:-:1      MOV cs2, cx02y66;
--:-:-:-:1      MOV cs3, cx03y66;
--:-:-:-:1      MOV cs4, cx64y66;
--:-:-:-:1      MOV cs5, cx65y66;
--:-:-:-:1      MOV cs6, cx66y66;
--:-:-:-:0      MOV cs7, cx67y66; // Dual Issue
--:-:-:-:5      CAL STORE_C;

02:-:-:-:1      MOV cs0, cx00y67; // Wait Dep 2
--:-:-:-:1      MOV cs1, cx01y67;
--:-:-:-:1      MOV cs2, cx02y67;
--:-:-:-:1      MOV cs3, cx03y67;
--:-:-:-:1      MOV cs4, cx64y67;
--:-:-:-:1      MOV cs5, cx65y67;
--:-:-:-:1      MOV cs6, cx66y67;
--:-:-:-:0      MOV cs7, cx67y67; // Dual Issue
--:-:-:-:5      CAL STORE_C;


// And we'd done.  The remainder is the STORE_C subroutine that's defined at the end of the kernel.
--:-:-:-:5      EXIT;

// This routine does warp synchronous shuffling of our output data so as to be able
// to have coalesced writes to global memory.  This is actually faster because the shared
// memory latencies can be hidden by other warps and we're only adding a few extra clocks
// to this thread.  Global memory here is the bottleneck and being able to half the needed
// bandwidth at the expense of a few clocks is a modest win.  This also keeps power lower
// and our chip running faster.

// Note, the SHFL instruction doesn't help us here because we're swaping different registers
// from different threads.
STORE_C:
// Each warp writes to its own region of memory so we don't need to bar.sync the access.
// There are some bank conflicts here but no way to avoid them, and the hit just means a few extra clocks.
// Note here that the scheduler is able to handle the dependencies between vector and non-vector instructions.
// It knows from the instruction type and the register map that cs0 here includes cs1, cs2 and cs3 as well.
// Loads naturally occur after the store to shared completes, no sync required.
--:-:-:-:0      IADD cy00, cy00, 1;
--:-:-:-:1      STS.128 [writeCs+4x<00>], cs0;
--:-:-:-:0      IADD cy04, cy04, 1;
--:-:-:-:1      STS.128 [writeCs+4x<64>], cs4;
--:-:-:-:0      IADD cy08, cy08, 1;
--:-:-:-:1      LDS cs0, [readCs + 4x<0*128 + 00>];
--:-:-:-:0      IADD cy12, cy12, 1;
--:-:-:-:1      LDS cs1, [readCs + 4x<0*128 + 64>];
--:-:-:-:0      IADD Cy00, Cy00, ldc1;
--:-:-:-:1      LDS cs2, [readCs + 4x<1*128 + 00>];
--:-:-:-:0      IADD Cy04, Cy04, ldc1;
--:-:-:-:1      LDS cs3, [readCs + 4x<1*128 + 64>];
--:-:-:-:0      IADD Cy08, Cy08, ldc1;
--:-:-:-:1      LDS cs4, [readCs + 4x<2*128 + 00>];
--:-:-:-:0      IADD Cy12, Cy12, ldc1;
--:-:-:-:1      LDS cs5, [readCs + 4x<2*128 + 64>];
--:-:-:-:1      ISETP.LT.AND P0, PT, cy00, n, P5;
--:-:-:-:1      LDS cs6, [readCs + 4x<3*128 + 00>];
--:-:-:-:1      ISETP.LT.AND P1, PT, cy00, n, P6;
--:-:1:-:1      LDS cs7, [readCs + 4x<3*128 + 64>]; // Set Dep 1
--:-:-:-:2      ISETP.LT.AND P2, PT, cy04, n, P5;
--:-:-:Y:7      ISETP.LT.AND P3, PT, cy04, n, P6;
01:-:-:-:1  @P0 STG.CG [Cy00 + 4x<00>], cs0; // Wait Dep 1
--:-:-:-:1      ISETP.LT.AND P0, PT, cy08, n, P5;
--:-:-:-:1  @P1 STG.CG [Cy00 + 4x<64>], cs1;
--:-:-:-:1      ISETP.LT.AND P1, PT, cy08, n, P6;
--:-:-:-:1  @P2 STG.CG [Cy04 + 4x<00>], cs2;
--:-:-:-:1      ISETP.LT.AND P2, PT, cy12, n, P5;
--:-:-:-:1  @P3 STG.CG [Cy04 + 4x<64>], cs3;
--:-:-:Y:7      ISETP.LT.AND P3, PT, cy12, n, P6;
--:-:-:-:2  @P0 STG.CG [Cy08 + 4x<00>], cs4;
--:-:-:-:2  @P1 STG.CG [Cy08 + 4x<64>], cs5;
--:-:-:-:2  @P2 STG.CG [Cy12 + 4x<00>], cs6;
--:2:-:-:1  @P3 STG.CG [Cy12 + 4x<64>], cs7; // Set Dep 2

--:-:-:-:5      RET;

